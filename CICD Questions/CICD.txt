1. What is the difference between Git and GitHub?
--> Git is a distributed version control system (VCS). It lets developers track changes, branch, merge, and manage code history. It also Works locally on your machine.
While, GitHub is a cloud-based hosting service for Git repositories. It Provides collaboration features like pull requests, issue tracking, discussions, and integrations with CI/CD.

2. List all the common Git commands and explain.
--> Common Commands:
git init – Initialize a new Git repository.
git clone <url> – Clone an existing repository from a remote source.
git branch – List branches.
git add <file> – Stage changes for commit.
git push – Upload local commits to the remote repository.
git pull – Fetch and merge changes from the remote repository.
git commit -m "message" – Save staged changes with a commit message.
git revert <commit> – Undo a commit by creating a new one.

3. What does CI/CD do, and why is it necessary?
--> Continuous Integration (CI): Automatically builds and tests code whenever developers push changes. Ensures bugs are caught early. While, Continuous Delivery/Deployment (CD): Delivery: Code is always in a deployable state; deployment may be manual.
Necessities:
a. Reduces bugs in production.
b. Speeds up development cycles.
c. Ensures consistent environments.
d. Provides quick feedback to developers.

4. List some popular CI/CD solutions. Where do they run, and how are they configured?
--> Popular CI/CD solution:
GitLab CI/CD – Runs on GitLab runners (cloud or self-hosted).
GitHub Actions – Runs in GitHub’s cloud environment; configured via YAML workflows.
Jenkins – Open-source automation server; runs anywhere (local, VM, container); configured with pipelines.
Azure DevOps Pipelines – Runs on Microsoft-hosted or self-hosted agents; YAML pipelines.

5. When is the CI/CD pipeline triggered?
--> CI/CD pipelines triggers in below listed scenarios:
Push events – When new code is pushed to a repo.
Pull requests / merge requests – When someone proposes changes.
Manual triggers – Developers can manually start pipelines.
Tagging/releases – When a new release tag is created. 

6. What is Docker, and why is it necessary?
--> Docker: It is a platform that packages applications into containers with all dependencies. Containers run the same way on different environments.
Benefit's:
Eliminates “works on my machine” problem.
Lightweight and faster than full virtual machines.
Helps scale microservices.
Enables reproducible builds.

7. How do you debug in a production environment? What tools are used?
--> I generally use Metrics, Loggings, Feature Flag, and Error Reporting methods.
a. For Loggings: Graylog
b. For Error tracking: Rollbar
c. For Monitoring: Datadog
d. For debugging: Kanban